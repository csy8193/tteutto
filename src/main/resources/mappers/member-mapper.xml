<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">

	<resultMap type="Member" id="member_rm">
		<id property="memberNo" column="MEMBER_NO" />
		
		<result property="memberGrade" column="MEMBER_GRADE" />
		<result property="memberSt" column="MEMBER_ST" />
		<result property="memberEmail" column="MEMBER_EMAIL" />
		<result property="memberPw" column="MEMBER_PW" />
		<result property="memberNm" column="MEMBER_NM" />
		<result property="memberBirth" column="MEMBER_BIRTH" />
		<result property="memberGender" column="MEMBER_GENDER" />
		<result property="memberPno" column="MEMBER_PNO" />
		<result property="memberImg" column="MEMBER_IMG" />
		<result property="memberRegDt" column="MEMBER_REG_DT" />
		<result property="memberSecDt" column="MEMBER_SEC_DT" />
		<result property="teacherEnroll" column="TEACHER_ENROLL" />
		<result property="memberKey" column="MEMBER_KEY" />
	</resultMap>

	<resultMap type="Teacher" id="teacher_rm">
		<id property="memberNo" column="MEMBER_NO" />
		
		<result property="memberGrade" column="MEMBER_GRADE" />
		<result property="memberSt" column="MEMBER_ST" />
		<result property="memberEmail" column="MEMBER_EMAIL" />
		<result property="memberPw" column="MEMBER_PW" />
		<result property="memberNm" column="MEMBER_NM" />
		<result property="memberBirth" column="MEMBER_BIRTH" />
		<result property="memberGender" column="MEMBER_GENDER" />
		<result property="memberPno" column="MEMBER_PNO" />
		<result property="memberImg" column="MEMBER_IMG" />
		<result property="memberRegDt" column="MEMBER_REG_DT" />
		<result property="memberSecDt" column="MEMBER_SEC_DT" />
		<result property="teacherEnroll" column="TEACHER_ENROLL" />
		
		<result property="teacherImg" column="TEACHER_IMG" />
		<result property="teacherIntro" column="TEACHER_INTRO" />
		<result property="teacherReqDt" column="TEACHER_REQ_DT" />
		<result property="teacherStatus" column="TEACHER_STATUS" />
	</resultMap>
	
	<resultMap type="Career" id="career_rm">
		<id property="memberNo" column="MEMBER_NO"/>
		<result property="careerNo" column="CAREER_NO"/>
		<result property="careerContent" column="CAREER_CONTENT"/>
		<result property="imgPath" column="IMG_PATH"/>
		<result property="imgOriginal" column="IMG_ORIGINAL"/>
		<result property="imgName" column="IMG_NM"/>
	</resultMap>
	
	<resultMap type="Sns" id="sns_rm">
		<id property="snsNo" column="SNS_NO"/>
		<result property="snsLink" column="SNS_LINK"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="snsDiv" column="SNS_DIV"/>
	</resultMap>
	
	<resultMap type="Certified" id="certified_rm">
		<id property="memberEmail" column="MEMBER_EMAIL" />
		<result property="certCd" column="CERT_CD" />
		<result property="certEndDt" column="CERT_END_DT" />
	</resultMap>
	
	<resultMap type="ClassRegister" id="classRegister_rm">
		<id property="regNo" column="REG_NO"/>
		<result property="memberNm" column="MEMBER_NM"/>
		<result property="classNo" column="CLASS_NO"/>
		<result property="epNo" column="EP_NO"/>
		<result property="className" column="CLASS_NM"/>
		<result property="classStatus" column="CLASS_ST"/>
		<result property="scheduleDate" column="SCHDL_DT"/>
		<result property="refundStatus" column="REFUND_ST"/>
		<result property="refundMoney" column="REFUND_MONEY"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="dtTerm" column="DT_TERM"/>
		<result property="epSt" column="EP_ST"/>
	</resultMap>
	
	<resultMap type="ClassReport" id="classReport_rm">
		<id property="reportNo" column="REPORT_NO" />
		<result property="reportDiv" column="REPORT_DIV" />
		<result property="reportContent" column="REPORT_CONTENT" />
		<result property="reportStatus" column="REPORT_ST" />
		<result property="regNo" column="REG_NO" />
		<result property="reportReqDate" column="REPORT_REQ_DT" />
	</resultMap>
	
	<resultMap type="ClassReview" id="classReview_rm">
		<id property="reviewNo" column="RE_NO" />
		<result property="reviewStar" column="RE_STAR" />
		<result property="reviewContent" column="RE_CONTENT" />
		<result property="reviewDt" column="RE_DT" />
		<result property="reviewStatus" column="RE_ST" />
		<result property="regNo" column="REG_NO" />
		
		<result property="className" column="CLASS_NM" />
		<result property="epCount" column="EP_COUNT" />
		<result property="memberName" column="MEMBER_NM" />
	</resultMap>
	
			
	<resultMap type="ChatRoom" id="chatRoom_rm">
		<id property="chatRoomNo" column="CHAT_ROOM_NO"/>
		
		<result property="chatRoomSt" column="CHAT_ROOM_ST"/>
		<result property="chatMemberSt" column="CHAT_MEMBER_ST"/>
		<result property="chatTeacherSt" column="CHAT_TEACHER_ST"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="teacherNo" column="TEACHER_NO"/>
		<result property="memberNm" column="MEMBER_NM"/>
		<result property="unreadMsgCnt" column="UNREAD_MSG_CNT"/>
		<result property="teacherNm" column="TEACHER_NM"/>
		<result property="teacherImg" column="TEACHER_IMG"/>
		
		<collection property="chatMessage" resultMap="chatMessage_rm"/>

		
	</resultMap>
	
	<resultMap type="ClassRefund" id="classRefund_rm">
		<id property="refundNo" column="REFUND_NO"/>
	
		<result property="refundReqDt" column="REFUND_REQ_DT"/>
		<result property="refundFinDt" column="REFUND_FIN_DT"/>
		<result property="classProgress" column="CLASS_PROGRESS"/>
		<result property="refundMoney" column="REFUND_MONEY"/>
		<result property="refundStatus" column="REFUND_ST"/>
		<result property="regNo" column="REG_NO"/>
	</resultMap>
	
	
	
	<!-- 로그인 -->
	<select id="login" resultMap="member_rm">
		SELECT * FROM MEMBER
		WHERE MEMBER_EMAIL = #{memberEmail}
		AND MEMBER_ST = 0
	</select>
	
	<!-- 이메일 중복 검사 -->
	<select id="emailDupCheck" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE MEMBER_EMAIL = #{inputEmail}
		AND MEMBER_ST != 2
	</select>
	
	<!-- 회원가입 -->
	<insert id="signUp" parameterType="Member">
		INSERT INTO MEMBER VALUES(SEQ_MEMBER_NO.NEXTVAL, DEFAULT,  DEFAULT, 
		#{memberEmail}, #{memberPw}, #{memberNm}, 
		#{memberBirth}, #{memberGender}, #{memberPno}, 
		null, SYSDATE, DEFAULT, DEFAULT)
	</insert>
	
	<!-- 회원 인증테이블에 이메일 중복 확인 -->
	<select id="emailDupCheck2"  resultType="_int">
		SELECT COUNT(*)
		FROM CERTIFIED
		WHERE MEMBER_EMAIL = #{inputEmail}
	</select>
	
	<!-- 회원가입 이메일 인증번호 저장 -->
	<insert id="sendMailTest">
		INSERT INTO CERTIFIED VALUES(#{inputEmail}, #{temp}, DEFAULT)
	</insert>
	
	<!-- 회원가입 이메일 인증번호 수정 -->
	<update id="updateMailTest">
		UPDATE CERTIFIED SET
		CERT_CD = #{temp}
		WHERE MEMBER_EMAIL = #{inputEmail}
	</update>
	
	<!-- 이메일 인증 확인 -->
	<select id="checkCert" resultType="_int">
		SELECT COUNT(*)
		FROM CERTIFIED
		WHERE MEMBER_EMAIL = #{inputEmail}
		AND CERT_CD = #{inputCertify}
	</select>
	
	<!-- 비밀번호 변경전 확인 -->
	<select id="changeConfirm" resultType="_int">
		SELECT COUNT(*)
		FROM CERTIFIED
		WHERE MEMBER_EMAIL = #{memberEmail}
		AND CERT_CD = #{certCd}
		AND MEMBER_PW IS NOT NULL
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="changePw">
		UPDATE MEMBER SET
		MEMBER_PW = #{memberPw}
		WHERE MEMBER_EMAIL = #{memberEmail}
	</update>
	
	<!-- 비밀번호 변경2 -->
	<update id="changePw2">
		UPDATE MEMBER SET
		MEMBER_PW = #{memberPw}
		WHERE MEMBER_No = #{memberNo}
	</update>
	
	<!-- 인증번호 삭제 -->
	<update id="updateCert">
		UPDATE CERTIFIED SET
		CERT_CD = #{certCd}
		WHERE MEMBER_EMAIL = #{memberEmail}
	</update>
	
	<!-- 강사 정보 조회 -->
	<select id="selectTeacherProfile" resultMap="teacher_rm">
		SELECT * FROM TEACHER
		JOIN MEMBER USING (MEMBER_NO)
		WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 강사 이력 조회 -->
	<select id="selectTeacherCareer" resultMap="career_rm">
		SELECT * FROM CAREER
		WHERE MEMBER_NO = #{memberNo}
		ORDER BY CAREER_NO
	</select>
	
	<!-- 강사 sns 조회 -->
	<select id="selectTeacherSns" resultMap="sns_rm">
		SELECT * FROM SNS
		WHERE MEMBER_NO = #{memberNo}
		ORDER BY SNS_NO
	</select>
	
	<!-- 강사 전화번호 수정 -->
	<update id="teacherPhoneUpdate" parameterType="map">
		UPDATE MEMBER SET MEMBER_PNO = #{phone}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 강사 전화번호 수정 -->
	<update id="teacherIntroduceUpdate" parameterType="Teacher">
		UPDATE TEACHER SET TEACHER_INTRO = #{teacherIntro}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 강사 sns 삭제 -->
	<update id="teacherSnsDelete">
		DELETE FROM SNS 
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 강사 sns 삽입 -->
	<insert id="teacherSnsInsert" parameterType="Sns">
		INSERT INTO SNS VALUES(SEQ_SNS_NO.NEXTVAL, #{snsLink}, #{memberNo}, #{snsDiv}, '?')
	</insert>

	<!-- 강사 이력 이미지 조회 -->
	<select id="selectImgName" resultType="string">
		SELECT IMG_NM FROM CAREER WHERE CAREER_NO = #{id}
	</select>

	<!-- 강사 이력 삭제 -->
	<delete id="teacherProfiledelete">
		DELETE FROM CAREER WHERE CAREER_NO = #{id}
	</delete>
	
	<!-- 강사 이력 삽입(수정) -->
	<insert id="teacherProfileInsert">
		INSERT INTO CAREER VALUES(SEQ_CAREER_NO.NEXTVAL, #{careerContent}, #{memberNo}, #{imgPath}, #{imgName}, #{imgOriginal})
	</insert>
	
	<!-- 학생 정보 수정  -->
	<update id="studentProfileUpdate">
		UPDATE MEMBER SET MEMBER_NM=#{memberNm}, MEMBER_PNO= #{memberPno}
		<if test="memberImg != null">
		, MEMBER_IMG = #{memberImg}
    	</if>
		WHERE MEMBER_NO=#{memberNo}
	</update>
	
	<!-- 회원 탈퇴 검사 -->
	<select id="selectmemberResign">
		<![CDATA[
		select count(*) from (
	        SELECT c.member_no, e.ep_no, c.class_no, to_char(min(s.schdl_dt),'yyyymmdd') start_date, to_char(max(s.schdl_dt),'yyyymmdd') end_date
	        FROM CLASS c
	        LEFT JOIN episode e on c.class_no = e.class_no
	        LEFT JOIN ep_schedule s on e.ep_no = s.ep_no
	        LEFT JOIN REGISTER R ON E.EP_NO = R.EP_NO 
	        WHERE c.member_no = #{memberNo} OR R.MEMBER_NO = #{memberNo}
	        group by c.member_no, e.ep_no, c.class_no
	        order by ep_no
	    ) t
		where (to_char(sysdate, 'yyyymmdd') >= t.start_date and to_char(sysdate, 'yyyymmdd') <= t.end_date)
		    or (to_char(sysdate, 'yyyymmdd') <= t.start_date )
		]]>
	</select>
	
	<!-- 회원 탈퇴 -->
	<update id="memberResign">
		UPDATE MEMBER SET MEMBER_ST = 1, MEMBER_SEC_DT = SYSDATE
		WHERE MEMBER_NO=#{memberNo}
	</update>	
	
	<!-- 강사 신청 -->
	<insert id="teacherRegisterInsert">
		INSERT INTO TEACHER VALUES(#{memberNo}, #{teacherImg}, #{teacherIntro}, SYSDATE, 0)
	</insert>
	
	<!-- 강사 이력 등록 -->
	<insert id="insertTeacherCareer" parameterType="list">
	INSERT INTO CAREER
	SELECT SEQ_CAREER_NO.NEXTVAL, A.* FROM
	
	<foreach collection="list" item="car"
			open="(" close=") A" separator=" UNION ALL ">
		SELECT #{car.careerContent} CAREER_CONTENT, 
			   #{car.memberNo} MEMBER_NO,
			   #{car.imgPath} IMG_PATH,
			   #{car.imgName} IMG_NM,
			   #{car.imgOriginal} IMG_ORIGINAL
		FROM DUAL
	</foreach>	
	
	</insert>
	
	
	<!-- 소셜 로그인 회원 확인 -->
	<select id="snsLogin" resultMap="member_rm">
		SELECT * FROM MEMBER
		WHERE MEMBER_EMAIL = #{email}
		AND MEMBER_ST = 0
		AND MEMBER_PW IS NULL
	</select>
	
	<!-- sns 이메일 중복 검사 -->
	<select id="emailCheck" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE MEMBER_EMAIL = #{email}
		AND MEMBER_ST != 2
	</select>
	
	<!-- 회원가입 -->
	<insert id="signUp2" parameterType="Member">
		INSERT INTO MEMBER VALUES(SEQ_MEMBER_NO.NEXTVAL, DEFAULT,  DEFAULT, 
		#{memberEmail}, null, #{memberNm}, 
		#{memberBirth}, #{memberGender}, #{memberPno}, 
		null, SYSDATE, DEFAULT, DEFAULT)
	</insert>
	
	<!-- 학생 수강 신청목록 -->
	<select id="studentClassList" resultMap="classRegister_rm">
		SELECT A.*,
	    (SELECT SUBSTR(MIN(SCHDL_DT), 1, 10) || ' ~ ' || SUBSTR(MAX(SCHDL_DT), 1, 10) 
	            FROM EP_SCHEDULE
	            WHERE EP_NO = A.EP_NO) DT_TERM
		FROM(
		    SELECT REG_NO, EP_NO, MEMBER_NM, MEMBER_NO, CLASS_NO, CLASS_NM, CLASS_ST, NVL(REFUND_ST, -1) REFUND_ST, NVL(REFUND_MONEY, -1) REFUND_MONEY, EP_ST(CLASS_NO, EP_NO) EP_ST
		    FROM CLASS C
		    JOIN EPISODE EP USING(CLASS_NO)
		    JOIN REGISTER R USING(EP_NO)
		    LEFT JOIN REFUND USING(REG_NO)
		    JOIN MEMBER M ON(C.MEMBER_NO = M.MEMBER_NO)
		    WHERE R.MEMBER_NO = #{memberNo} AND REG_ST = 0) A
	</select>
	
	<!-- 학생 작성 후기목록 조회 -->
	<select id="studentCommentList" resultMap="classReview_rm">
		SELECT  RE_NO, CLASS_NM, EP_COUNT, MEMBER_NM, RE_STAR, RE_CONTENT  
		FROM REVIEW
	    JOIN REGISTER R USING(REG_NO)
	    JOIN EPISODE USING(EP_NO)
	    JOIN CLASS C USING(CLASS_NO)
	    JOIN MEMBER M ON(C.MEMBER_NO = M.MEMBER_NO)
	    WHERE R.MEMBER_NO = #{memberNo}
	    AND RE_ST = 0
	</select>
	
	
	<!-- 학생의 클래스 신고 -->
	<insert id="insertReport" parameterType="ClassReport">
		INSERT INTO REPORT VALUES(
		    SEQ_REPORT_NO.NEXTVAL, 0, #{reportContent}, 0, #{regNo}, SYSDATE
		)
	</insert>
	
	<!-- 학생 후기 작성 -->
	<insert id="insertReview" parameterType="ClassReview">
		INSERT INTO REVIEW VALUES(
		    SEQ_RE_NO.NEXTVAL, #{reviewStar}, #{reviewContent}, SYSDATE, 0, #{regNo}
		)
	</insert>
	
	<!-- 학생 후기 수정 -->
	<update id="updateReview">
		UPDATE REVIEW SET
		RE_STAR = #{reviewStar},
		RE_CONTENT = #{reviewContent}
		WHERE RE_NO = #{reviewNo}
	</update>
	
	
	<!-- 학생 대 강사 채팅방 생성 -->
	<insert id="insertChatRoom" parameterType="ChatRoom">
		INSERT INTO CHAT_ROOM VALUES(
		    SEQ_CHAT_ROOM_NO.NEXTVAL, 0, 0, 0, #{memberNo}, #{teacherNo}
		)
	</insert>

	<!-- 채팅방이 이미 있는지 확인 -->
	<select id="checkChatRoom" resultType="_int">
		SELECT COUNT(*) FROM CHAT_ROOM
		WHERE MEMBER_NO = #{memberNo}
		AND TEACHER_NO = #{teacherNo}
	</select>
	
	<!-- 학생 후기 삭제 -->
	<update id="deleteReview">
		UPDATE REVIEW SET
		RE_ST = 1
		WHERE RE_NO = #{reviewNo}
	</update>
	
	<!-- 클래스가 이미 후기가 작성됐는지 -->
	<select id="searchReview" resultType="_int">
		SELECT COUNT(*) FROM REVIEW
		WHERE REG_NO = #{regNo}
		AND RE_ST != 1
	</select>
	
	<!-- 클래스가 이미 신고가 됐는지 -->
	<select id="searchReport" resultType="_int">
		SELECT COUNT(*) FROM REPORT
		WHERE REG_NO = #{regNo}
	</select>
	
	<!-- 환불 신청 -->
	<insert id="refundClass" parameterType="ClassRefund">
		INSERT INTO REFUND 
		SELECT SEQ_REFUND_NO.NEXTVAL, SYSDATE, NULL, "진행률", (1 - "진행률" * 0.01 ) * EP_PRICE "환불금액", 0, #{regNo}
		FROM (
		
		    SELECT ((SELECT COUNT(*) FROM EPISODE
		            JOIN EP_SCHEDULE USING(EP_NO)
		            WHERE EP_NO = #{epNo}<![CDATA[
		            AND SCHDL_DT < SYSDATE)  / 
		            
		            (SELECT COUNT(*) FROM EPISODE
		            JOIN EP_SCHEDULE USING(EP_NO)
		            WHERE EP_NO =]]> #{epNo}) * 100) "진행률",
		            
		            EP_PRICE
		    FROM EPISODE
		    WHERE EP_NO = #{epNo}
		)
		
	</insert>
	
	<!-- 환불 신청이 이미 됐는지 확인 -->
	<select id="checkRefund" resultType="_int">
		SELECT COUNT(*) FROM REFUND
		WHERE REG_NO = #{regNo}
	</select>
	
		
	<!-- 수강신청 목록 개수 -->
	<select id="registerCount" resultType="_int">
		SELECT COUNT(*)
		FROM(
		    SELECT REG_NO, EP_NO, CLASS_NO 번호, MEMBER_NM 강사명, MEMBER_NO, CLASS_NM 클래스명, CLASS_ST 클래스상태, REFUND_ST 환불상태, REFUND_MONEY 환불금액
		    FROM CLASS C
		    JOIN EPISODE EP USING(CLASS_NO)
		    JOIN REGISTER R USING(EP_NO)
		    LEFT JOIN REFUND USING(REG_NO)
		    JOIN MEMBER M ON(C.MEMBER_NO = M.MEMBER_NO)
		    WHERE R.MEMBER_NO = #{memberNo})
	</select>
	
	<!-- 후기신청 목록 개수 -->
	<select id="reviewCount" resultType="_int">
		SELECT COUNT(*)
		FROM REVIEW
		    JOIN REGISTER R USING(REG_NO)
		    JOIN EPISODE USING(EP_NO)
		    JOIN CLASS C USING(CLASS_NO)
		    JOIN MEMBER M ON(C.MEMBER_NO = M.MEMBER_NO)
		    WHERE R.MEMBER_NO = #{memberNo}
		    AND RE_ST = 0
	</select>
	
	<!-- 강사 이미지 수정 -->
	<update id="teacherImgUpdate">
		update teacher set teacher_img = #{imgName}
		where member_no = #{memberNo}
	</update>

	<!-- 강사가 이미 신청되었는지 확인 -->
	<select id="teacherSt" resultType="_int">
		SELECT NVL(TEACHER_ST, -1) TEACHER_ST FROM MEMBER
		LEFT JOIN TEACHER USING(MEMBER_NO)
		WHERE MEMBER_NO = #{memberNo}
	</select>

	<!-- 후기 쓰기전에 강의가 끝났는지 -->
	<select id="overDateReview" resultType="_int">
		SELECT COUNT(*) FROM EP_SCHEDULE
		WHERE EP_NO = #{epNo}
		AND SCHDL_DT > SYSDATE
	</select>
	
</mapper>
