<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">

	<resultMap type="Member" id="member_rm">
		<id property="memberNo" column="MEMBER_NO" />
		
		<result property="memberGrade" column="MEMBER_GRADE" />
		<result property="memberSt" column="MEMBER_ST" />
		<result property="memberEmail" column="MEMBER_EMAIL" />
		<result property="memberPw" column="MEMBER_PW" />
		<result property="memberNm" column="MEMBER_NM" />
		<result property="memberBirth" column="MEMBER_BIRTH" />
		<result property="memberGender" column="MEMBER_GENDER" />
		<result property="memberPno" column="MEMBER_PNO" />
		<result property="memberImg" column="MEMBER_IMG" />
		<result property="memberRegDt" column="MEMBER_REG_DT" />
		<result property="memberSecDt" column="MEMBER_SEC_DT" />
		<result property="teacherEnroll" column="TEACHER_ENROLL" />
		<result property="memberKey" column="MEMBER_KEY" />
	</resultMap>

	<resultMap type="Teacher" id="teacher_rm">
		<id property="memberNo" column="MEMBER_NO" />
		
		<result property="memberGrade" column="MEMBER_GRADE" />
		<result property="memberSt" column="MEMBER_ST" />
		<result property="memberEmail" column="MEMBER_EMAIL" />
		<result property="memberPw" column="MEMBER_PW" />
		<result property="memberNm" column="MEMBER_NM" />
		<result property="memberBirth" column="MEMBER_BIRTH" />
		<result property="memberGender" column="MEMBER_GENDER" />
		<result property="memberPno" column="MEMBER_PNO" />
		<result property="memberImg" column="MEMBER_IMG" />
		<result property="memberRegDt" column="MEMBER_REG_DT" />
		<result property="memberSecDt" column="MEMBER_SEC_DT" />
		<result property="teacherEnroll" column="TEACHER_ENROLL" />
		
		<result property="teacherImg" column="TEACHER_IMG" />
		<result property="teacherIntro" column="TEACHER_INTRO" />
		<result property="teacherReqDt" column="TEACHER_REQ_DT" />
		<result property="teacherStatus" column="TEACHER_STATUS" />
	</resultMap>
	
	<resultMap type="Career" id="career_rm">
		<id property="memberNo" column="MEMBER_NO"/>
		<result property="careerNo" column="CAREER_NO"/>
		<result property="careerContent" column="CAREER_CONTENT"/>
		<result property="imgPath" column="IMG_PATH"/>
		<result property="imgOriginal" column="IMG_ORIGINAL"/>
		<result property="imgName" column="IMG_NM"/>
	</resultMap>
	
	<resultMap type="Sns" id="sns_rm">
		<id property="snsNo" column="SNS_NO"/>
		<result property="snsLink" column="SNS_LINK"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="snsDiv" column="SNS_DIV"/>
	</resultMap>
	
	<resultMap type="Certified" id="certified_rm">
		<id property="memberEmail" column="MEMBER_EMAIL" />
		<result property="certCd" column="CERT_CD" />
		<result property="certEndDt" column="CERT_END_DT" />
	</resultMap>
	
	<resultMap type="ClassRegister" id="classRegister_rm">
		<id property="regNo" column="REG_NO"/>
		<result property="classNo" column="CLASS_NO"/>
		<result property="className" column="CLASS_NM"/>
		<result property="classStatus" column="CLASS_ST"/>
		<result property="scheduleDate" column="SCHDL_DT"/>
		<result property="refundStatus" column="REFUND_ST"/>
		<result property="refundMoney" column="REFUND_MONEY"/>
		<result property="memberNo" column="MEMBER_NO"/>
	</resultMap>
	
	
	<!-- 로그인 -->
	<select id="login" resultMap="member_rm">
		SELECT * FROM MEMBER
		WHERE MEMBER_EMAIL = #{memberEmail}
		AND MEMBER_ST = 0
	</select>
	
	<!-- 이메일 중복 검사 -->
	<select id="emailDupCheck" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE MEMBER_EMAIL = #{inputEmail}
		AND MEMBER_ST != 2
	</select>
	
	<!-- 회원가입 -->
	<insert id="signUp" parameterType="Member">
		INSERT INTO MEMBER VALUES(SEQ_MEMBER_NO.NEXTVAL, DEFAULT,  DEFAULT, 
		#{memberEmail}, #{memberPw}, #{memberNm}, 
		#{memberBirth}, #{memberGender}, #{memberPno}, 
		null, SYSDATE, DEFAULT, DEFAULT)
	</insert>
	
	<!-- 회원 인증테이블에 이메일 중복 확인 -->
	<select id="emailDupCheck2"  resultType="_int">
		SELECT COUNT(*)
		FROM CERTIFIED
		WHERE MEMBER_EMAIL = #{inputEmail}
	</select>
	
	<!-- 회원가입 이메일 인증번호 저장 -->
	<insert id="sendMailTest">
		INSERT INTO CERTIFIED VALUES(#{inputEmail}, #{temp}, DEFAULT)
	</insert>
	
	<!-- 회원가입 이메일 인증번호 수정 -->
	<update id="updateMailTest">
		UPDATE CERTIFIED SET
		CERT_CD = #{temp}
		WHERE MEMBER_EMAIL = #{inputEmail}
	</update>
	
	<!-- 이메일 인증 확인 -->
	<select id="checkCert" resultType="_int">
		SELECT COUNT(*)
		FROM CERTIFIED
		WHERE MEMBER_EMAIL = #{inputEmail}
		AND CERT_CD = #{inputCertify}
	</select>
	
	<!-- 비밀번호 변경전 확인 -->
	<select id="changeConfirm" resultType="_int">
		SELECT COUNT(*)
		FROM CERTIFIED
		WHERE MEMBER_EMAIL = #{memberEmail}
		AND CERT_CD = #{certCd}
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="changePw">
		UPDATE MEMBER SET
		MEMBER_PW = #{memberPw}
		WHERE MEMBER_EMAIL = #{memberEmail}
	</update>
	
	<!-- 인증번호 삭제 -->
	<update id="updateCert">
		UPDATE CERTIFIED SET
		CERT_CD = #{certCd}
		WHERE MEMBER_EMAIL = #{memberEmail}
	</update>
	
	<!-- 강사 정보 조회 -->
	<select id="selectTeacherProfile" resultMap="teacher_rm">
		SELECT * FROM TEACHER
		JOIN MEMBER USING (MEMBER_NO)
		WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 강사 이력 조회 -->
	<select id="selectTeacherCareer" resultMap="career_rm">
		SELECT * FROM CAREER
		WHERE MEMBER_NO = #{memberNo}
		ORDER BY CAREER_NO
	</select>
	
	<!-- 강사 sns 조회 -->
	<select id="selectTeacherSns" resultMap="sns_rm">
		SELECT * FROM SNS
		WHERE MEMBER_NO = #{memberNo}
		ORDER BY SNS_NO
	</select>
	
	<!-- 강사 전화번호 수정 -->
	<update id="teacherPhoneUpdate" parameterType="map">
		UPDATE MEMBER SET MEMBER_PNO = #{phone}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 강사 전화번호 수정 -->
	<update id="teacherIntroduceUpdate" parameterType="Teacher">
		UPDATE TEACHER SET TEACHER_INTRO = #{teacherIntro}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 강사 sns 삭제 -->
	<update id="teacherSnsDelete">
		DELETE FROM SNS 
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 강사 sns 삽입 -->
	<update id="teacherSnsInsert" parameterType="Sns">
		INSERT INTO SNS VALUES(SEQ_SNS_NO.NEXTVAL, #{snsLink}, #{memberNo}, #{snsDiv})
	</update>

	<!-- 강사 이력 이미지 조회 -->
	<select id="selectImgName" resultType="string">
		SELECT IMG_NM FROM CAREER WHERE CAREER_NO = #{id}
	</select>

	<!-- 강사 이력 삭제 -->
	<delete id="teacherProfiledelete">
		DELETE FROM CAREER WHERE CAREER_NO = #{id}
	</delete>
	
	<!-- 강사 이력 삽입(수정) -->
	<insert id="teacherProfileInsert">
		INSERT INTO CAREER VALUES(SEQ_CAREER_NO.NEXTVAL, #{careerContent}, #{memberNo}, #{imgPath}, #{imgName}, #{imgOriginal})
	</insert>
	
	<!-- 학생 정보 수정  -->
	<update id="studentProfileUpdate">
		UPDATE MEMBER SET MEMBER_NM=#{memberNm}, MEMBER_PNO= #{memberPno}, MEMBER_IMG = #{memberImg}
		WHERE MEMBER_NO=#{memberNo}
	</update>
	
	<!-- 회원 탈퇴 검사 -->
	<select id="selectmemberResign">
		<![CDATA[
		select * from (
		    SELECT c.member_no, e.ep_no, c.class_no, to_char(min(s.schdl_dt),'yyyymmdd') start_date, to_char(max(s.schdl_dt),'yyyymmdd') end_date
		    FROM CLASS c
		    LEFT JOIN episode e on c.class_no = e.class_no
		    LEFT JOIN ep_schedule s on e.ep_no = s.ep_no
		    WHERE c.member_no =]]>#{memberNo}
		    <![CDATA[
		    group by c.member_no, e.ep_no, c.class_no
		    order by ep_no
		) t
		where (to_char(sysdate, 'yyyymmdd') >= t.start_date and to_char(sysdate, 'yyyymmdd') <= t.end_date)
		    or (to_char(sysdate, 'yyyymmdd') <= t.start_date and to_char(sysdate, 'yyyymmdd') <= t.end_date)
		]]>
	</select>
	
	<!-- 회원 탈퇴 -->
	<update id="memberResign">
		UPDATE MEMBER SET MEMBER_ST = 1, MEMBER_SEC_DT = SYSDATE
		WHERE MEMBER_NO=#{memberNo}
	</update>	
	
	<!-- 강사 신청 -->
	<insert id="teacherRegisterInsert">
		INSERT INTO TEACHER VALUES(#{memberNo}, #{teacherImg}, #{teacherIntro}, SYSDATE, 0)
	</insert>
	
	<!-- 강사 이력 등록 -->
	<insert id="insertTeacherCareer" parameterType="list">
	INSERT INTO CAREER
	SELECT SEQ_CAREER_NO.NEXTVAL, A.* FROM
	
	<foreach collection="list" item="car"
			open="(" close=") A" separator=" UNION ALL ">
		SELECT #{car.careerContent} CAREER_CONTENT, 
			   #{car.memberNo} MEMBER_NO,
			   #{car.imgPath} IMG_PATH,
			   #{car.imgName} IMG_NM,
			   #{car.imgOriginal} IMG_ORIGINAL
		FROM DUAL
	</foreach>	
	
	</insert>
	
	
	<!-- 소셜 로그인 회원 확인 -->
	<select id="snsLogin" resultMap="member_rm">
		SELECT * FROM MEMBER
		WHERE MEMBER_EMAIL = #{email}
		AND MEMBER_ST = 0
		AND MEMBER_PW IS NULL
	</select>
	
	<!-- sns 이메일 중복 검사 -->
	<select id="emailCheck" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE MEMBER_EMAIL = #{email}
		AND MEMBER_ST != 2
	</select>
	
	<!-- 회원가입 -->
	<insert id="signUp2" parameterType="Member">
		INSERT INTO MEMBER VALUES(SEQ_MEMBER_NO.NEXTVAL, DEFAULT,  DEFAULT, 
		#{memberEmail}, null, #{memberNm}, 
		#{memberBirth}, #{memberGender}, #{memberPno}, 
		null, SYSDATE, DEFAULT, DEFAULT)
	</insert>
	
	<!-- 학생 수강 신청목록 -->
	<select id="studentClassList" resultMap="classRegister_rm">
		SELECT A.*,
	    (SELECT MIN(SCHDL_DT) || ' ~ ' || MAX(SCHDL_DT) 
	            FROM EP_SCHEDULE
	            WHERE EP_NO = A.EP_NO)
		FROM(
		    SELECT EP_NO, CLASS_NO, CLASS_NM, CLASS_ST, REFUND_ST, REFUND_MONEY
		    FROM CLASS
		    JOIN EPISODE EP USING(CLASS_NO)
		    JOIN REGISTER R USING(EP_NO)
		    LEFT JOIN REFUND USING(REG_NO)
		    WHERE R.MEMBER_NO = #{memberNo}) A
	</select>
	<!--
	<select id="studentCommentList" resultMap="">
		SELECT  RE_NO, CLASS_NM, EP_COUNT, MEMBER_NM, RE_STAR, RE_CONTENT  
		FROM REVIEW
	    JOIN REGISTER R USING(REG_NO)
	    JOIN EPISODE USING(EP_NO)
	    JOIN CLASS C USING(CLASS_NO)
	    JOIN MEMBER M ON(C.MEMBER_NO = M.MEMBER_NO)
	    WHERE R.MEMBER_NO = #{memberNo}
	</select>
	-->
	
	
	
</mapper>
